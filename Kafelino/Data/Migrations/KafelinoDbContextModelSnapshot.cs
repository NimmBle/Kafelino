// <auto-generated />
using System;
using Kafelino.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kafelino.Data.Migrations
{
    [DbContext(typeof(KafelinoDbContext))]
    partial class KafelinoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kafelino.Domain.Cart", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Kafelino.Domain.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Kafelino.Domain.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderProductId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Kafelino.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WeightId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("WeightId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1461),
                            Description = "Тази изключителна партида Гейша идва от прочутата ферма Volcán Azul, която редовно се отличава като победител в конкурса Cup of Excellence Costa Rica. Обработена чрез натурален метод, тази партида разкрива елегантността и сложността, които правят Гейша толкова ценен сорт. Ароматът е фин и цветен, водещ към живи вкусове на жасмин и сочна папая. Ябълково-цитрусова киселинност придава свеж баланс, докато естествената сладост се запазва дълго, оставяйки изтънчен и продължителен вкус на кафява захар.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/vulkan-azul-geisha.jpg",
                            IsDeleted = false,
                            Name = "Вулкан Азул | Гейша",
                            Price = 26.00m,
                            Quantity = 95,
                            WeightId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1531),
                            Description = "Тази уникална партида е резултат от иновативния подход на Хайро Арсила, който използва плодова ферментация за обогатяване на вкусовия профил. Кафето впечатлява с нотки на праскова, кокос и ванилия, създавайки комплексен и запомнящ се вкус.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/jairo-arsila-fruit-fermentation.jpg",
                            IsDeleted = false,
                            Name = "Хайро Арсила | Плодова ферментация",
                            Price = 24.00m,
                            Quantity = 120,
                            WeightId = 4
                        },
                        new
                        {
                            ProductId = 3,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1533),
                            Description = "Отгледано в региона Уиля, Колумбия, това кафе от сорта Таби предлага богат вкус с изразени нотки на боровинки, грозде и натурален шоколад. Идеално за любителите на плодови и сладки профили.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/alonso-bustos-tabi.jpg",
                            IsDeleted = false,
                            Name = "Алонсо Бустос | Таби",
                            Price = 32.00m,
                            Quantity = 75,
                            WeightId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1535),
                            Description = "Тази партида от региона Гуджи в Етиопия се отличава с флорални аромати и вкусове на жасмин, праскова и карамел. Перфектен избор за тези, които търсят елегантно и балансирано кафе.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/hambela-guji-ethiopia.jpg",
                            IsDeleted = false,
                            Name = "Хамбела Гуджи, Етиопия",
                            Price = 28.00m,
                            Quantity = 105,
                            WeightId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1537),
                            Description = "Кафе от региона Матагалпа в Никарагуа, което впечатлява с плътно тяло и вкусови нотки на карамел, зряла череша и черен чай.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/finca-san-isidro-catuai.jpg",
                            IsDeleted = false,
                            Name = "Финка Сан Исидро | Катуай",
                            Price = 19.00m,
                            Quantity = 85,
                            WeightId = 4
                        },
                        new
                        {
                            ProductId = 6,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1539),
                            Description = "Традиционно кенийско кафе с интензивен аромат и вкусове на касис, цитрусови плодове и черен чай. Отличен избор за филтърно приготвяне.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/kenya-karimiru-sl28-sl34.jpg",
                            IsDeleted = false,
                            Name = "Кения Каримиру | SL28 & SL34",
                            Price = 28.00m,
                            Quantity = 95,
                            WeightId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1541),
                            Description = "Кафе от планините на Гватемала с комплексен профил и вкусове на какао, карамел и портокалова кора.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/guatemala-junacan-pacamara.jpg",
                            IsDeleted = false,
                            Name = "Гватемала Хунакан | Пакмара",
                            Price = 25.00m,
                            Quantity = 110,
                            WeightId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1543),
                            Description = "Традиционно бразилско кафе със сладък и балансиран вкус на шоколад, лешник и карамел. Перфектно за еспресо.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/brazil-santos-natural.jpg",
                            IsDeleted = false,
                            Name = "Бразилия Сантош | Натурален",
                            Price = 18.00m,
                            Quantity = 90,
                            WeightId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1545),
                            Description = "Легендарно кафе от региона Йиргачеф в Етиопия, което предлага флорални нотки, цитрусови плодове и медена сладост.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/ethiopia-sidamo-yirgacheffe.jpg",
                            IsDeleted = false,
                            Name = "Етиопия Сидамо | Yirgacheffe",
                            Price = 26.00m,
                            Quantity = 80,
                            WeightId = 3
                        },
                        new
                        {
                            ProductId = 10,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1547),
                            Description = "Плодово и сладко кафе с нотки на сушена слива, лешник и мед. Един от най-добрите примери за африканско кафе.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/rwanda-gaciziro-bourbon.jpg",
                            IsDeleted = false,
                            Name = "Руанда Гацизиро | Бърбън",
                            Price = 27.00m,
                            Quantity = 115,
                            WeightId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1549),
                            Description = "Едно от най-изисканите кафета в света – Панамската Гейша от региона Бокете е известна със своите интензивни флорални аромати, цитрусови нотки и копринена текстура. Сладостта и продължителният послевкус правят това кафе истинско удоволствие.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/panama-boquete-geisha.jpg",
                            IsDeleted = false,
                            Name = "Панама Бокете | Гейша",
                            Price = 30.00m,
                            Quantity = 105,
                            WeightId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1551),
                            Description = "Кафе от региона Гайо в Суматра, което предлага пикантни и земни нотки с намек за канела, тъмен шоколад и индийско орехче. Балансирано тяло и дълъг, сладък послевкус.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/indonesia-sumatra-gayo.jpg",
                            IsDeleted = false,
                            Name = "Индонезия Суматра | Gayo",
                            Price = 22.50m,
                            Quantity = 95,
                            WeightId = 3
                        },
                        new
                        {
                            ProductId = 13,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1553),
                            Description = "Класическо йеменско кафе с дълбок профил – нотки на тъмен шоколад, черен чай и сушени плодове. Истинско историческо кафе с автентичен вкус.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/yemen-mokha-matari.jpg",
                            IsDeleted = false,
                            Name = "Йемен Мокха Матари",
                            Price = 32.00m,
                            Quantity = 85,
                            WeightId = 2
                        },
                        new
                        {
                            ProductId = 14,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1555),
                            Description = "Уникално кафе от планините на Уганда със сочен плодов профил и нотки на кайсия, шоколад и карамфил. Отличава се със свежа киселинност и кремообразно тяло.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/uganda-bugisu-sl14-sl28.jpg",
                            IsDeleted = false,
                            Name = "Уганда Бугису | SL14 & SL28",
                            Price = 23.50m,
                            Quantity = 115,
                            WeightId = 4
                        },
                        new
                        {
                            ProductId = 15,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1556),
                            Description = "Отгледано в региона Маркала, това кафе предлага приятен баланс между сладост и киселинност, с нотки на мед, орех и млечен шоколад.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/honduras-marcala-catuai.jpg",
                            IsDeleted = false,
                            Name = "Хондурас Маркала | Катуай",
                            Price = 21.50m,
                            Quantity = 100,
                            WeightId = 1
                        },
                        new
                        {
                            ProductId = 16,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1558),
                            Description = "Кафе от региона Серрадо в Бразилия със сладък и плътен профил. Вкусове на лешник, шоколад и карамел правят това кафе отличен избор за еспресо.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/brazil-cerrado-bourbon.jpg",
                            IsDeleted = false,
                            Name = "Бразилия Серрадо | Бурбон",
                            Price = 19.00m,
                            Quantity = 110,
                            WeightId = 2
                        },
                        new
                        {
                            ProductId = 17,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1560),
                            Description = "Средно изпечено перуанско кафе със сладък и мек вкус. Нотки на тъмен шоколад, бадем и сладка череша. Подходящо за всички методи на приготвяне.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/peru-san-ignacio-catuai.jpg",
                            IsDeleted = false,
                            Name = "Перу Сан Игнасио | Катуай",
                            Price = 23.00m,
                            Quantity = 90,
                            WeightId = 3
                        },
                        new
                        {
                            ProductId = 18,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1562),
                            Description = "Кафе от един от най-добрите райони в Коста Рика, отличаващо се с карамелена сладост, нотки на ванилия и цитрусово усещане. Перфектно за филтърно кафе.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/costa-rica-tarrazu-caturra.jpg",
                            IsDeleted = false,
                            Name = "Коста Рика Тарразу | Катура",
                            Price = 24.50m,
                            Quantity = 120,
                            WeightId = 4
                        },
                        new
                        {
                            ProductId = 19,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1564),
                            Description = "Фина селекция от сорта Пакамаара, отличаваща се с плодова сладост и нотки на зелена ябълка, мед и лимон. Изключително комплексно и балансирано кафе.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/el-salvador-santa-ana-pacamara.jpg",
                            IsDeleted = false,
                            Name = "Ел Салвадор Санта Ана | Пакамаара",
                            Price = 26.00m,
                            Quantity = 80,
                            WeightId = 2
                        },
                        new
                        {
                            ProductId = 20,
                            Brand = "KOMETA",
                            CreatedOn = new DateTime(2025, 3, 19, 22, 2, 0, 808, DateTimeKind.Local).AddTicks(1566),
                            Description = "Високопланинско кафе с богата киселинност и сложен ароматен профил. Нотки на кайсия, мед и черен чай го правят предпочитан избор за филтърно кафе.",
                            ImageUrl = "https://kometa.coffee/wp-content/uploads/2024/03/colombia-tolima-castillo.jpg",
                            IsDeleted = false,
                            Name = "Колумбия Толуима | Кастийо",
                            Price = 25.00m,
                            Quantity = 75,
                            WeightId = 1
                        });
                });

            modelBuilder.Entity("Kafelino.Domain.ProductTasteNote", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TasteNoteId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "TasteNoteId");

                    b.HasIndex("TasteNoteId");

                    b.ToTable("ProductTasteNotes");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            TasteNoteId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            TasteNoteId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            TasteNoteId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            TasteNoteId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            TasteNoteId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            TasteNoteId = 6
                        },
                        new
                        {
                            ProductId = 3,
                            TasteNoteId = 7
                        },
                        new
                        {
                            ProductId = 3,
                            TasteNoteId = 8
                        },
                        new
                        {
                            ProductId = 3,
                            TasteNoteId = 9
                        },
                        new
                        {
                            ProductId = 4,
                            TasteNoteId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            TasteNoteId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            TasteNoteId = 13
                        },
                        new
                        {
                            ProductId = 5,
                            TasteNoteId = 13
                        },
                        new
                        {
                            ProductId = 5,
                            TasteNoteId = 14
                        },
                        new
                        {
                            ProductId = 5,
                            TasteNoteId = 15
                        },
                        new
                        {
                            ProductId = 6,
                            TasteNoteId = 16
                        },
                        new
                        {
                            ProductId = 6,
                            TasteNoteId = 17
                        },
                        new
                        {
                            ProductId = 6,
                            TasteNoteId = 15
                        },
                        new
                        {
                            ProductId = 7,
                            TasteNoteId = 18
                        },
                        new
                        {
                            ProductId = 7,
                            TasteNoteId = 13
                        },
                        new
                        {
                            ProductId = 7,
                            TasteNoteId = 19
                        },
                        new
                        {
                            ProductId = 8,
                            TasteNoteId = 20
                        },
                        new
                        {
                            ProductId = 8,
                            TasteNoteId = 21
                        },
                        new
                        {
                            ProductId = 8,
                            TasteNoteId = 13
                        },
                        new
                        {
                            ProductId = 9,
                            TasteNoteId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            TasteNoteId = 17
                        },
                        new
                        {
                            ProductId = 9,
                            TasteNoteId = 11
                        },
                        new
                        {
                            ProductId = 10,
                            TasteNoteId = 14
                        },
                        new
                        {
                            ProductId = 10,
                            TasteNoteId = 21
                        },
                        new
                        {
                            ProductId = 10,
                            TasteNoteId = 11
                        },
                        new
                        {
                            ProductId = 11,
                            TasteNoteId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            TasteNoteId = 17
                        },
                        new
                        {
                            ProductId = 11,
                            TasteNoteId = 11
                        },
                        new
                        {
                            ProductId = 12,
                            TasteNoteId = 3
                        },
                        new
                        {
                            ProductId = 12,
                            TasteNoteId = 20
                        },
                        new
                        {
                            ProductId = 12,
                            TasteNoteId = 6
                        },
                        new
                        {
                            ProductId = 13,
                            TasteNoteId = 20
                        },
                        new
                        {
                            ProductId = 13,
                            TasteNoteId = 15
                        },
                        new
                        {
                            ProductId = 13,
                            TasteNoteId = 14
                        },
                        new
                        {
                            ProductId = 14,
                            TasteNoteId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            TasteNoteId = 20
                        },
                        new
                        {
                            ProductId = 14,
                            TasteNoteId = 3
                        },
                        new
                        {
                            ProductId = 15,
                            TasteNoteId = 11
                        },
                        new
                        {
                            ProductId = 15,
                            TasteNoteId = 21
                        },
                        new
                        {
                            ProductId = 15,
                            TasteNoteId = 20
                        },
                        new
                        {
                            ProductId = 16,
                            TasteNoteId = 21
                        },
                        new
                        {
                            ProductId = 16,
                            TasteNoteId = 20
                        },
                        new
                        {
                            ProductId = 16,
                            TasteNoteId = 13
                        },
                        new
                        {
                            ProductId = 17,
                            TasteNoteId = 20
                        },
                        new
                        {
                            ProductId = 17,
                            TasteNoteId = 21
                        },
                        new
                        {
                            ProductId = 17,
                            TasteNoteId = 14
                        },
                        new
                        {
                            ProductId = 18,
                            TasteNoteId = 13
                        },
                        new
                        {
                            ProductId = 18,
                            TasteNoteId = 6
                        },
                        new
                        {
                            ProductId = 18,
                            TasteNoteId = 19
                        },
                        new
                        {
                            ProductId = 19,
                            TasteNoteId = 12
                        },
                        new
                        {
                            ProductId = 19,
                            TasteNoteId = 11
                        },
                        new
                        {
                            ProductId = 19,
                            TasteNoteId = 17
                        },
                        new
                        {
                            ProductId = 20,
                            TasteNoteId = 4
                        },
                        new
                        {
                            ProductId = 20,
                            TasteNoteId = 11
                        },
                        new
                        {
                            ProductId = 20,
                            TasteNoteId = 15
                        });
                });

            modelBuilder.Entity("Kafelino.Domain.TasteNote", b =>
                {
                    b.Property<int>("TasteNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TasteNoteId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TasteNoteId");

                    b.ToTable("TasteNotes");

                    b.HasData(
                        new
                        {
                            TasteNoteId = 1,
                            Name = "Жасмин"
                        },
                        new
                        {
                            TasteNoteId = 2,
                            Name = "Папая"
                        },
                        new
                        {
                            TasteNoteId = 3,
                            Name = "Кафява захар"
                        },
                        new
                        {
                            TasteNoteId = 4,
                            Name = "Праскова"
                        },
                        new
                        {
                            TasteNoteId = 5,
                            Name = "Кокос"
                        },
                        new
                        {
                            TasteNoteId = 6,
                            Name = "Ванилия"
                        },
                        new
                        {
                            TasteNoteId = 7,
                            Name = "Боровинки"
                        },
                        new
                        {
                            TasteNoteId = 8,
                            Name = "Грозде"
                        },
                        new
                        {
                            TasteNoteId = 9,
                            Name = "Натурален шоколад"
                        },
                        new
                        {
                            TasteNoteId = 10,
                            Name = "Ягода"
                        },
                        new
                        {
                            TasteNoteId = 11,
                            Name = "Мед"
                        },
                        new
                        {
                            TasteNoteId = 12,
                            Name = "Червена ябълка"
                        },
                        new
                        {
                            TasteNoteId = 13,
                            Name = "Карамел"
                        },
                        new
                        {
                            TasteNoteId = 14,
                            Name = "Зряла череша"
                        },
                        new
                        {
                            TasteNoteId = 15,
                            Name = "Черен чай"
                        },
                        new
                        {
                            TasteNoteId = 16,
                            Name = "Касис"
                        },
                        new
                        {
                            TasteNoteId = 17,
                            Name = "Цитрусови плодове"
                        },
                        new
                        {
                            TasteNoteId = 18,
                            Name = "Какао"
                        },
                        new
                        {
                            TasteNoteId = 19,
                            Name = "Портокалова кора"
                        },
                        new
                        {
                            TasteNoteId = 20,
                            Name = "Шоколад"
                        },
                        new
                        {
                            TasteNoteId = 21,
                            Name = "Лешник"
                        });
                });

            modelBuilder.Entity("Kafelino.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2165c78b-8b5e-4fd2-b862-36d753465dfc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6475fa08-3733-463d-84b7-3154642f630b",
                            Email = "admin@kafelino.com",
                            EmailConfirmed = true,
                            FirstName = "Иван",
                            LastName = "Георгиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@KAFELINO.COM",
                            NormalizedUserName = "ADMIN@KAFELINO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAPG0QM3unywwqwmdwEIqCO5TAK0QU88oMxc4A55+vCa+FlY6SVjf+Mx5kVIyvLyyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47207b50-636d-418b-a14d-4c2538884af7",
                            TwoFactorEnabled = false,
                            UserName = "admin@kafelino.com"
                        },
                        new
                        {
                            Id = "351271dc-b3c0-472c-8634-9440336a328e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af9a4e67-ea30-4372-8649-82e3197eba5a",
                            Email = "user@kafelino.com",
                            EmailConfirmed = true,
                            FirstName = "Михаил",
                            LastName = "Филипов",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@KAFELINO.COM",
                            NormalizedUserName = "USER@KAFELINO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKkOMXMtGeuuB76gIpS/WQWRQg3b3IBzF1DNAScxeoT3YraLOT84mcorJ8FYFoXJ0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "719c9f34-da9c-4fd5-87b2-392ee7d91ae3",
                            TwoFactorEnabled = false,
                            UserName = "user@kafelino.com"
                        });
                });

            modelBuilder.Entity("Kafelino.Domain.Weight", b =>
                {
                    b.Property<int>("WeightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeightId"));

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("WeightId");

                    b.ToTable("Weights");

                    b.HasData(
                        new
                        {
                            WeightId = 1,
                            Unit = "г",
                            Value = 250
                        },
                        new
                        {
                            WeightId = 2,
                            Unit = "г",
                            Value = 500
                        },
                        new
                        {
                            WeightId = 3,
                            Unit = "кг",
                            Value = 1
                        },
                        new
                        {
                            WeightId = 4,
                            Unit = "кг",
                            Value = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "964f4b36-48aa-4630-9cd4-2df269f0592a",
                            ConcurrencyStamp = "964f4b36-48aa-4630-9cd4-2df269f0592a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2165c78b-8b5e-4fd2-b862-36d753465dfc",
                            RoleId = "964f4b36-48aa-4630-9cd4-2df269f0592a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Kafelino.Domain.Cart", b =>
                {
                    b.HasOne("Kafelino.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kafelino.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kafelino.Domain.Order", b =>
                {
                    b.HasOne("Kafelino.Domain.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kafelino.Domain.OrderProduct", b =>
                {
                    b.HasOne("Kafelino.Domain.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kafelino.Domain.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Kafelino.Domain.Product", b =>
                {
                    b.HasOne("Kafelino.Domain.Weight", "Weight")
                        .WithMany("Products")
                        .HasForeignKey("WeightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("Kafelino.Domain.ProductTasteNote", b =>
                {
                    b.HasOne("Kafelino.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kafelino.Domain.TasteNote", "TasteNote")
                        .WithMany()
                        .HasForeignKey("TasteNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("TasteNote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Kafelino.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Kafelino.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kafelino.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Kafelino.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kafelino.Domain.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Kafelino.Domain.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Kafelino.Domain.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Kafelino.Domain.Weight", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
